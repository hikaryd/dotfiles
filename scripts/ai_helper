#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ai_helper_gemini.py – универсальный CLI-помощник для автоматизированного создания MR, сообщений коммитов и рефакторинга текста через Google Gemini API.
Поддерживает три режима:

  • **mr**        – формирование Title/Description Merge Request по Git-diff
  • **commit**    – генерация Conventional Commit-сообщения на основе staged diff
  • **refactor**  – исправление текста из буфера обмена

Перед использованием:
  1. Запишите ваш ключ API в файл ~/.gemini_key
  2. Убедитесь, что файл доступен для чтения
  3. (Опционально) Задайте модель через GEMINI_MODEL (по умолчанию "gemini-2.5-flash-preview-05-20").

Запуск:
    python ai_helper_gemini.py --mode mr
    python ai_helper_gemini.py --mode commit
    python ai_helper_gemini.py --mode refactor
"""

import argparse
import json
import os
import re
import subprocess
import sys
import urllib.error
import urllib.request
from typing import Any, Dict, Optional

###############################################################################
# PROMPTS (English text; response must be in Russian)
###############################################################################

MR_PROMPT_TEMPLATE = """
# РОЛЬ: Ты — опытный AI-ассистент, специализирующийся на анализе кода и создании Merge Request.
# ЗАДАЧА: На основе предоставленного Git diff-а создай информативный заголовок и структурированное, подробное описание Merge Request. Ответь на русском языке.

# ВХОД (diff для анализа):
{diff}

# ИНСТРУКЦИИ:

## 1. Заголовок:
* **Краткость:** Не более 72 символов.
* **Ясность:** Отрази основное изменение или цель.
* **Формат (Conventional Commits):** feat:, fix:, refactor:, perf:, docs:, test:, chore:.

## 2. Описание:
* **Что было сделано:** Краткое резюме и перечень всех типов изменений: feat, fix, refactor, perf, docs, test, chore, style.
* **Зачем это было сделано:** Мотивация или бизнес-требование.
* **Как проверить (необязательно):** Шаги для тестирования.
* **Дополнительно (необязательно):** Риски, открытые вопросы.

# ФОРМАТ ВЫВОДА (строго соблюдай):
Title: <сгенерированный заголовок>
Description: <сгенерированное описание>
"""

COMMIT_MESSAGE_PROMPT = """
Ты — эксперт по написанию сообщений коммитов на русском языке, строго соблюдающий правила Conventional Commits.
Сгенерируй сообщение коммита на русском языке на основе предоставленного Git diff-а.

ВХОД:
diff:
{diff}
ОБЩИЕ ПРАВИЛА:
* Полностью на русском языке.
* Две части: заголовок и подробное описание, разделённые пустой строкой.
* Используй типы изменений по Conventional Commits.

1. Заголовок:
* **Содержание:** Общее краткое описание.
* **Формат:** `<scope>: <описание>` (scope — необязательно).
* **Наклонение:** Повелительное.
* **Длина:** ≤ 50 символов.
* **Капитализация:** С заглавной буквы, без точки в конце.

2. Тело:
* Объясни, что и зачем сделано (не как).
* Идёт после заголовка с одной пустой строкой.
* Может включать маркированные пункты.

Типы: feat, fix, docs, style, refactor, perf, test, build, ci, chore.

ВЫВОД (строго соблюдай):
<Заголовок>

<Подробное описание>
"""

REFRACTOR_PROMPT_TEMPLATE = (
    "Проанализируй этот текст, найди и исправь ошибки. "
    "Верни только исправленный текст без комментариев.\n\n{text}"
)

###############################################################################
# УТИЛИТЫ
###############################################################################


def remove_think(text: str) -> str:
    return re.sub(r"<think>.*?</think>", "", text, flags=re.DOTALL)


def notify(title: str, message: str) -> None:
    if sys.platform == "darwin":
        subprocess.run(
            [
                "osascript",
                "-e",
                f'display notification "{message}" with title "{title}"',
            ]
        )
    else:
        subprocess.run(["notify-send", title, message])


def get_clipboard_text() -> str:
    cmd = ["pbpaste"] if sys.platform == "darwin" else ["wl-paste"]
    try:
        return subprocess.check_output(cmd, encoding="utf-8")
    except subprocess.CalledProcessError:
        return ""


def set_clipboard_text(text: str) -> None:
    cmd = ["pbcopy"] if sys.platform == "darwin" else ["wl-copy"]
    proc = subprocess.Popen(cmd, stdin=subprocess.PIPE)
    proc.communicate(input=text.encode("utf-8"))


###############################################################################
# ЗАГРУЗКА КЛЮЧА API
###############################################################################


def load_api_key() -> Optional[str]:
    key = os.getenv("GEMINI_API_KEY") or os.getenv("GOOGLE_API_KEY")
    if key:
        return key
    path = os.path.expanduser("~/.gemini_key")
    try:
        with open(path, encoding="utf-8") as f:
            return f.read().strip()
    except (OSError, IOError):
        return None


###############################################################################
# GEMINI COMMUNICATION
###############################################################################


def send_request(prompt: str, model: Optional[str] = None) -> Optional[Dict[str, Any]]:
    api_key = load_api_key()
    if not api_key:
        notify(
            "AI Helper (Gemini)",
            "Не удалось загрузить API-ключ из окружения или ~/.gemini_key",
        )
        sys.exit(1)
    model = model or os.getenv("GEMINI_MODEL", "gemini-2.5-flash-preview-05-20")
    url = (
        f"https://generativelanguage.googleapis.com/v1beta/models/"
        f"{model}:generateContent?key={api_key}"
    )
    payload = {"contents": [{"parts": [{"text": prompt}]}]}
    data = json.dumps(payload).encode("utf-8")
    headers = {"Content-Type": "application/json; charset=utf-8"}
    req = urllib.request.Request(url, data=data, headers=headers, method="POST")
    try:
        with urllib.request.urlopen(req) as resp:
            return json.loads(resp.read().decode("utf-8"))
    except urllib.error.HTTPError as err:
        notify(
            "AI Helper (Gemini)",
            f"HTTP Error: {err.code} {err.reason}\n{err.read().decode()}",
        )
    except urllib.error.URLError as err:
        notify("AI Helper (Gemini)", f"URL Error: {err.reason}")
    return None


def extract_answer(response: Dict[str, Any]) -> str:
    candidates = response.get("candidates", [])
    if candidates:
        parts = candidates[0].get("content", {}).get("parts", [])
        return "".join(p.get("text", "") for p in parts).strip()
    return response.get("output", "") or response.get("content", "") or ""


###############################################################################
# GIT HELPERS
###############################################################################


def git_current_branch() -> str:
    return subprocess.check_output(
        ["git", "rev-parse", "--abbrev-ref", "HEAD"], encoding="utf-8"
    ).strip()


def git_diff(refspec: str) -> str:
    return subprocess.check_output(["git", "diff", refspec], encoding="utf-8")


def git_diff_cached() -> str:
    return subprocess.check_output(
        [
            "git",
            "--no-pager",
            "-c",
            "delta.enable=false",
            "diff",
            "--cached",
            "--text",
        ],
        encoding="utf-8",
    )


###############################################################################
# MODE HANDLERS
###############################################################################


def handle_mr() -> None:
    target = input("Enter target branch for MR: ").strip()
    if not target:
        print("No target branch specified. Exit.")
        sys.exit(1)
    try:
        diff = git_diff(f"{target}..{git_current_branch()}")
    except subprocess.CalledProcessError as err:
        notify("AI Helper", f"Git error: {err}")
        sys.exit(1)
    if not diff.strip():
        notify("AI Helper", "No changes to compare.")
        sys.exit(0)
    prompt = MR_PROMPT_TEMPLATE.format(diff=diff)
    resp = send_request(prompt)
    if not resp:
        print("Failed to get a response.")
        sys.exit(1)
    answer = remove_think(extract_answer(resp))
    print({answer})
    set_clipboard_text(answer)
    notify("AI Helper", "MR description copied.")


def handle_commit() -> None:
    diff = git_diff_cached()
    if not diff.strip():
        print("No staged changes.")
        sys.exit(0)
    prompt = COMMIT_MESSAGE_PROMPT.format(diff=diff)
    resp = send_request(prompt)
    if not resp:
        print("Failed to get a response.")
        sys.exit(1)
    answer = remove_think(extract_answer(resp))
    lines = answer.splitlines()
    title = lines[0]
    body = "\n".join(lines[2:]).strip()
    commit_msg = f"{title}\n\n{body}" if body else title
    print(commit_msg)
    set_clipboard_text(commit_msg)
    notify("AI Helper", "Commit message copied.")


def handle_refactor() -> None:
    text = get_clipboard_text()
    if not text:
        notify("AI Helper", "Clipboard is empty.")
        sys.exit(1)
    prompt = REFRACTOR_PROMPT_TEMPLATE.format(text=text)
    resp = send_request(prompt)
    if not resp:
        print("Failed to get a response.")
        sys.exit(1)
    answer = remove_think(extract_answer(resp))
    set_clipboard_text(answer)
    notify("AI Helper", "Refactored text copied.")


###############################################################################
# CLI
###############################################################################


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="AI Helper (Gemini edition)")
    parser.add_argument(
        "--mode",
        choices=["mr", "commit", "refactor"],
        required=True,
        help="Mode: mr | commit | refactor",
    )
    return parser.parse_args()


def main() -> None:
    args = parse_args()
    if args.mode == "mr":
        handle_mr()
    elif args.mode == "commit":
        handle_commit()
    else:
        handle_refactor()


if __name__ == "__main__":
    main()
