#!/usr/bin/env python3
"""
ai_helper.py – универсальный CLI-помощник для разработчика.
Поддерживает несколько AI-провайдеров для автоматизации рутинных задач.

Режимы:
  • mr        – формирование Title/Description Merge Request по Git-diff
  • commit    – генерация Conventional Commit-сообщения на основе staged diff
  • refactor  – исправление текста из буфера обмена

Провайдеры (--provider):
  • gemini (по умолчанию)
    - Ключ API: переменная GEMINI_API_KEY или файл ~/.gemini_key
    - Модель: переменная GEMINI_MODEL (по умолч. "gemini-1.5-flash-latest")
  • x5
    - Конфигурация: JSON-файл ~/.x5_copilot_config.json

Запуск:
    python ai_helper.py --mode mr
    python ai_helper.py --provider x5 --mode commit
"""

import argparse
import json
import os
import re
import subprocess
import sys
import urllib.error
import urllib.request
from abc import ABC, abstractmethod
from pathlib import Path
from typing import Any, Final

# --- Константы ---

PROVIDER_GEMINI: Final[str] = "gemini"
PROVIDER_X5: Final[str] = "x5"

MR_PROMPT_TEMPLATE: Final[str] = """
# РОЛЬ: Ты — опытный AI-ассистент, специализирующийся на анализе кода и создании Merge Request.
# ЗАДАЧА: На основе предоставленного Git diff-а создай информативный заголовок и структурированное, подробное описание Merge Request. Ответь на русском языке.

# ВХОД (diff для анализа):
{diff}

# ИНСТРУКЦИИ:
## 1. Заголовок:
* Краткость: Не более 72 символов.
* Ясность: Отрази основное изменение или цель.
* Формат (Conventional Commits): feat:, fix:, refactor:, perf:, docs:, test:, chore:.
## 2. Описание:
* Что было сделано: Краткое резюме и перечень всех типов изменений: feat, fix, refactor, perf, docs, test, chore, style.
* Зачем это было сделано: Мотивация или бизнес-требование.
* Как проверить (необязательно): Шаги для тестирования.
* Дополнительно (необязательно): Риски, открытые вопросы.

# ФОРМАТ ВЫВОДА (строго соблюдай):
Title: <сгенерированный заголовок>
Description: <сгенерированное описание>
"""

COMMIT_MESSAGE_PROMPT: Final[str] = """
Generate a minimal English commit message with title and description following Conventional Commits format.

INPUT:
{diff}

RULES:
* Use English only
* Two parts: minimal title and minimal description
* Title: maximum 50 characters, no period
* Description: 1-2 short sentences maximum
* Use Conventional Commits types: feat, fix, docs, style, refactor, perf, test, build, ci, chore
* Format: type: brief description
* Use imperative mood
* Be extremely concise and minimal

OUTPUT FORMAT:
<title>

<description>
"""

REFACTOR_PROMPT_TEMPLATE: Final[str] = (
    "Проанализируй этот текст, найди и исправь ошибки. "
    "Верни только исправленный текст без комментариев.\n\n{text}"
)


class BaseAIProvider(ABC):
    """Абстрактный базовый класс для AI-провайдеров."""

    def __init__(self, name: str):
        self.name = name

    @abstractmethod
    def send_request(self, prompt: str) -> dict[str, Any] | None:
        pass

    @abstractmethod
    def extract_answer(self, response: dict[str, Any]) -> str:
        pass

    def _load_key_from_env_or_file(self, env_var: str, file_path: Path) -> str | None:
        """Загружает ключ из переменной окружения или файла."""
        if key := os.getenv(env_var):
            return key
        if file_path.exists():
            return file_path.read_text(encoding="utf-8").strip()
        return None


class GeminiProvider(BaseAIProvider):
    """Провайдер для Google Gemini API."""

    def __init__(self):
        super().__init__("Gemini")
        self.api_key = self._load_key_from_env_or_file(
            "GEMINI_API_KEY", Path.home() / ".gemini_key"
        )
        self.model = os.getenv("GEMINI_MODEL", "gemini-1.5-flash-latest")
        if not self.api_key:
            _exit_with_error(
                f"AI Helper ({self.name})",
                "Не удалось загрузить API-ключ из окружения (GEMINI_API_KEY) или файла ~/.gemini_key.",
            )

    def send_request(self, prompt: str) -> dict[str, Any] | None:
        url = (
            f"https://generativelanguage.googleapis.com/v1beta/models/"
            f"{self.model}:generateContent?key={self.api_key}"
        )
        payload = {"contents": [{"parts": [{"text": prompt}]}]}
        data = json.dumps(payload).encode("utf-8")
        headers = {"Content-Type": "application/json; charset=utf-8"}
        req = urllib.request.Request(url, data=data, headers=headers, method="POST")

        try:
            with urllib.request.urlopen(req) as resp:
                return json.loads(resp.read().decode("utf-8"))
        except urllib.error.HTTPError as err:
            notify(
                f"AI Helper ({self.name})",
                f"HTTP Error: {err.code}\n{err.read().decode()}",
            )
        except urllib.error.URLError as err:
            notify(f"AI Helper ({self.name})", f"URL Error: {err.reason}")
        return None

    def extract_answer(self, response: dict[str, Any]) -> str:
        try:
            parts = response["candidates"][0]["content"]["parts"]
            return "".join(p.get("text", "") for p in parts).strip()
        except (KeyError, IndexError, TypeError):
            return ""


class X5Provider(BaseAIProvider):
    """Провайдер для X5 Copilot API."""

    def __init__(self):
        super().__init__("X5 Copilot")
        self.api_key: str | None = None
        self.api_base: str | None = None
        self.model: str | None = None
        self._load_config()

    def _load_config(self):
        config_path = Path.home() / ".x5_copilot_config.json"
        if not config_path.is_file():
            _exit_with_error(
                f"AI Helper ({self.name})",
                f"Файл конфигурации не найден: {config_path}",
                (
                    "Пожалуйста, создайте его со следующим содержимым:\n\n"
                    "{\n"
                    '  "api_key": "",\n'
                    '  "api_base": "",\n'
                    '  "model": ""\n'
                    "}"
                ),
            )
        try:
            config = json.loads(config_path.read_text(encoding="utf-8"))
        except json.JSONDecodeError:
            _exit_with_error(
                f"AI Helper ({self.name})",
                f"Ошибка парсинга JSON в файле {config_path}.",
            )

        self.api_key = config.get("api_key")
        self.api_base = config.get("api_base")
        self.model = config.get("model")
        if not all([self.api_key, self.api_base, self.model]):
            _exit_with_error(
                f"AI Helper ({self.name})",
                f"Файл {config_path} должен содержать 'api_key', 'api_base' и 'model'.",
            )

    def send_request(self, prompt: str) -> dict[str, Any] | None:
        url = f"{self.api_base}/chat/completions"
        payload = {
            "provider": PROVIDER_X5,
            "model": self.model,
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.5,
            "max_tokens": 1500,
            "stream": False,
        }
        data = json.dumps(payload).encode("utf-8")
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {self.api_key}",
        }
        req = urllib.request.Request(url, data=data, headers=headers, method="POST")

        try:
            with urllib.request.urlopen(req) as resp:
                return json.loads(resp.read().decode("utf-8"))
        except urllib.error.HTTPError as err:
            notify(
                f"AI Helper ({self.name})",
                f"HTTP Error: {err.code}\n{err.read().decode()}",
            )
        except urllib.error.URLError as err:
            notify(f"AI Helper ({self.name})", f"URL Error: {err.reason}")
        return None

    def extract_answer(self, response: dict[str, Any]) -> str:
        try:
            return response["choices"][0]["message"]["content"].strip()
        except (KeyError, IndexError, TypeError):
            return ""


# --- Утилиты ---


def remove_think_tags(text: str) -> str:
    return re.sub(r"<think>.*?</think>", "", text, flags=re.DOTALL)


def notify(title: str, message: str) -> None:
    if sys.platform == "darwin":
        subprocess.run(
            [
                "osascript",
                "-e",
                f'display notification "{message}" with title "{title}"',
            ]
        )
    else:
        try:
            subprocess.run(
                ["notify-send", title, message], check=True, capture_output=True
            )
        except (FileNotFoundError, subprocess.CalledProcessError):
            print(f"[{title}] {message}")


def get_clipboard_text() -> str:
    commands = {
        "darwin": ["pbpaste"],
        "linux": ["wl-paste", ["xclip", "-selection", "clipboard", "-o"]],
    }
    cmd_list = commands.get(sys.platform)
    if not cmd_list:
        _exit_with_error("Ошибка буфера обмена", "Ваша ОС не поддерживается.")

    for cmd in cmd_list if isinstance(cmd_list[0], list) else [cmd_list]:
        try:
            return subprocess.run(
                cmd, capture_output=True, text=True, check=True
            ).stdout
        except (FileNotFoundError, subprocess.CalledProcessError):
            continue
    _exit_with_error(
        "Ошибка буфера обмена",
        "Не найдены утилиты: pbpaste (macOS) или wl-paste/xclip (Linux).",
    )
    return ""


def set_clipboard_text(text: str) -> None:
    commands = {
        "darwin": ["pbcopy"],
        "linux": ["wl-copy", ["xclip", "-selection", "clipboard"]],
    }
    cmd_list = commands.get(sys.platform)
    if not cmd_list:
        _exit_with_error("Ошибка буфера обмена", "Ваша ОС не поддерживается.")

    for cmd in cmd_list if isinstance(cmd_list[0], list) else [cmd_list]:
        try:
            subprocess.run(cmd, input=text, text=True, check=True, capture_output=True)
            return
        except (FileNotFoundError, subprocess.CalledProcessError):
            continue
    _exit_with_error(
        "Ошибка буфера обмена",
        "Не найдены утилиты: pbcopy (macOS) или wl-copy/xclip (Linux).",
    )


def git_diff(refspec: str) -> str:
    return subprocess.run(
        ["git", "diff", refspec], capture_output=True, text=True, check=True
    ).stdout


def git_diff_cached() -> str:
    return subprocess.run(
        ["git", "--no-pager", "diff", "--cached", "--text"],
        capture_output=True,
        text=True,
        check=True,
    ).stdout


def _exit_with_error(title: str, message: str, details: str | None = None) -> None:
    notify(title, message)
    print(f"Ошибка: {message}", file=sys.stderr)
    if details:
        print(f"\n{details}", file=sys.stderr)
    sys.exit(1)


# --- Обработчики режимов ---


def _process_ai_request(provider: BaseAIProvider, prompt: str) -> str:
    response = provider.send_request(prompt)
    if not response:
        _exit_with_error("AI Helper", "Не удалось получить ответ от AI.")

    answer = provider.extract_answer(response)
    if not answer:
        print(
            f"AI вернул пустой ответ. Полный ответ для отладки:\n{json.dumps(response, indent=2)}",
            file=sys.stderr,
        )
        _exit_with_error("AI Helper", "Пустой ответ от AI.")

    return remove_think_tags(answer)


def handle_mr(provider: BaseAIProvider) -> None:
    target = input("Введите целевую ветку для MR: ").strip()
    if not target:
        print("Целевая ветка не указана. Выход.")
        return
    try:
        current_branch = subprocess.run(
            ["git", "rev-parse", "--abbrev-ref", "HEAD"],
            capture_output=True,
            text=True,
            check=True,
        ).stdout.strip()
        diff = git_diff(f"{target}..{current_branch}")
    except subprocess.CalledProcessError as e:
        _exit_with_error("Ошибка Git", e.stderr)
    if not diff.strip():
        notify("AI Helper", "Нет изменений для создания MR.")
        return
    answer = _process_ai_request(provider, MR_PROMPT_TEMPLATE.format(diff=diff))
    print(answer)
    set_clipboard_text(answer)
    notify("AI Helper", "Описание для MR скопировано.")


def handle_commit(provider: BaseAIProvider) -> None:
    try:
        diff = git_diff_cached()
    except subprocess.CalledProcessError as e:
        _exit_with_error("Ошибка Git", e.stderr)
    if not diff.strip():
        print("Нет staged-изменений для коммита.")
        return
    answer = _process_ai_request(provider, COMMIT_MESSAGE_PROMPT.format(diff=diff))
    lines = [line for line in answer.splitlines() if line.strip()]
    title = lines[0] if lines else "fix: "
    body = "\n".join(lines[1:]) if len(lines) > 1 else ""
    commit_msg = f"{title}\n\n{body}".strip()
    print(commit_msg)
    set_clipboard_text(commit_msg)
    notify("AI Helper", "Сообщение коммита скопировано.")


def handle_refactor(provider: BaseAIProvider) -> None:
    text = get_clipboard_text()
    if not text:
        notify("AI Helper", "Буфер обмена пуст.")
        return
    answer = _process_ai_request(provider, REFACTOR_PROMPT_TEMPLATE.format(text=text))
    print(answer)
    set_clipboard_text(answer)
    notify("AI Helper", "Исправленный текст скопирован.")


# --- Точка входа ---


def main() -> None:
    parser = argparse.ArgumentParser(
        description="AI Helper для разработчика.",
        formatter_class=argparse.RawTextHelpFormatter,
    )
    parser.add_argument(
        "--mode",
        choices=["mr", "commit", "refactor"],
        required=True,
        help="Режим работы: mr | commit | refactor",
    )
    parser.add_argument(
        "--provider",
        choices=[PROVIDER_GEMINI, PROVIDER_X5],
        default=PROVIDER_GEMINI,
        help=f"Используемый AI-провайдер (по умолчанию: {PROVIDER_GEMINI})",
    )
    args = parser.parse_args()

    provider: BaseAIProvider = (
        X5Provider() if args.provider == PROVIDER_X5 else GeminiProvider()
    )

    mode_handlers = {
        "mr": handle_mr,
        "commit": handle_commit,
        "refactor": handle_refactor,
    }
    handler = mode_handlers[args.mode]
    handler(provider)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nОперация прервана пользователем.", file=sys.stderr)
        sys.exit(1)
